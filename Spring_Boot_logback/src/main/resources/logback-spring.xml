<?xml version="1.0" encoding="UTF-8"?>
<!--scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
<!--scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
<!--debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration  scan="true" scanPeriod="60 seconds" debug="false">
    <contextName>logback</contextName>
    <!--设置变量<property> 用来定义变量值的标签，有两个属性，
    name和value；其中name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。
    定义变量后，可以使“${}”来使用变量-->
    <property name="log.path" value="log" />
    <!--输出到控制台-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--ThresholdFilter为系统定义的拦截器，
        例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。
        如果不用记得注释掉，不然你控制台会发现没日志~-->
        <!-- <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>ERROR</level>
         </filter>-->
        <!--<encoder>表示对日志进行编码：
            %d{HH: mm:ss.SSS}——日志输出时间。
            %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用。
            %-5level——日志级别，并且使用5个字符靠左对齐。
            %logger{36}——日志输出者的名字。
            %msg——日志消息。
            %n——平台的换行符。-->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--输出到文件-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--定义了日志的切分方式——把每一天的日志归档到一个文件中；-->
            <fileNamePattern>${log.path}/logback.%d{yyyy-MM-dd}.log</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <root level="info">
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </root>

    <!-- logback为java中的包 -->
    <!--name：用来指定受此logger约束的某一个包或者具体的某一个类-->
    <!--level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
    还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。-->
    <!--addtivity：是否向上级logger传递打印信息。默认是true。-->

    <!--当执行com.mrbird.controller.LearnController类的login方法时，
    LearnController 在包com.mrbird.controller中，
    所以首先执行<logger name="com.mrbird.controller"/>，
    将级别为“info”及大于“info”的日志信息传递给root，本身并不打印；
    root接到下级传递的信息，交给已经配置好的名为“console”的appender处理，“console”appender将信息打印到控制台-->
    <logger name="com.mrbird.controller"/>
    <!--logback.LogbackDemo：类的全路径 -->
    <!--这时候执行com.mrbird.controller.LearnController类的login方法时，
    先执行<logger name="com.mrbird.controller.LearnController"
    level="WARN" additivity="false">, 将级别为“WARN”及大于“WARN”的日志信息交给此logger指定的名为“console”的appender处理，
    在控制台中打出日志，不再向上级root传递打印信息。-->
    <logger name="com.mrbird.controller.LoginController" level="WARN" additivity="false">
        <appender-ref ref="console"/>
    </logger>
</configuration>